1. Show the subject names of books supplied by *supplier2*.

SELECT DISTINCT s.CategoryName AS SubNames
FROM db_book b
JOIN db_subject s ON b.SubjectID = s.SubjectID
JOIN db_supplier sup ON b.SupplierID = sup.SupplierID
WHERE sup.CompanyName = 'supplier2';
SELECT * FROM db_supplier WHERE CompanyName = 'supplier2';

*****************************************************************************************************************************************

2. Show the name and price of the most expensive book supplied by
     *supplier3*.

SELECT b.Title AS BookName, b.UnitPrice AS Price
FROM db_book b
JOIN db_supplier sup ON b.SupplierID = sup.SupplierID
WHERE sup.CompanyName = 'supplier3'
ORDER BY b.UnitPrice DESC
LIMIT 1;

*****************************************************************************************************************************************

3. Show the unique names of all books ordered by *lastname1
     firstname1*.

SELECT DISTINCT db_book.Title
FROM db_book
JOIN db_order_detail ON db_book.BookID = db_order_detail.BookID
JOIN db_order ON db_order_detail.OrderID = db_order.OrderID
JOIN db_customer ON db_order.CustomerID = db_customer.CustomerID
WHERE db_customer.FirstName = 'firstname1' AND db_customer.LastName = 'lastname1';

*****************************************************************************************************************************************

4. Show the title of books which have more than 10 units in stock.

SELECT Title
FROM db_book
WHERE Quantity > 10;

*****************************************************************************************************************************************

5. Show the total price *lastname1 firstname1* has paid for the books.

SELECT SUM(db_order_detail.Quantity * db_book.UnitPrice) AS TotalPrice
FROM db_order
JOIN db_customer ON db_order.CustomerID = db_customer.CustomerID
JOIN db_order_detail ON db_order.OrderID = db_order_detail.OrderID
JOIN db_book ON db_order_detail.BookID = db_book.BookID
WHERE db_customer.FirstName = 'firstname1' AND db_customer.LastName = 'lastname1';

*****************************************************************************************************************************************

6. Show the names of the customers who have paid less than $80 in
     totals.

SELECT db_customer.FirstName, db_customer.LastName
FROM db_customer
JOIN db_order ON db_customer.CustomerID = db_order.CustomerID
JOIN db_order_detail ON db_order.OrderID = db_order_detail.OrderID
JOIN db_book ON db_order_detail.BookID = db_book.BookID
GROUP BY db_customer.CustomerID
HAVING SUM(db_order_detail.Quantity * db_book.UnitPrice) < 80;

*****************************************************************************************************************************************

7. Show the name of books supplied by *supplier2*.

SELECT DISTINCT db_book.Title
FROM db_book
JOIN db_supplier ON db_book.SupplierID = db_supplier.SupplierID
WHERE db_supplier.CompanyName = 'supplier2';

*****************************************************************************************************************************************

8. Show the total price each customer paid and their names.  List the
     result in descending price.

SELECT db_customer.FirstName, db_customer.LastName, 
       SUM(db_order_detail.Quantity * db_book.UnitPrice) AS TotalPrice
FROM db_customer
JOIN db_order ON db_customer.CustomerID = db_order.CustomerID
JOIN db_order_detail ON db_order.OrderID = db_order_detail.OrderID
JOIN db_book ON db_order_detail.BookID = db_book.BookID
GROUP BY db_customer.CustomerID
ORDER BY TotalPrice DESC;

*****************************************************************************************************************************************

9. Show the names of all the books shipped on 08/04/2016 and their
     shippers' names.

SELECT db_book.Title, db_shipper.ShpperName AS ShipperName
FROM db_order
JOIN db_order_detail ON db_order.OrderID = db_order_detail.OrderID
JOIN db_book ON db_order_detail.BookID = db_book.BookID
JOIN db_shipper ON db_order.ShipperID = db_shipper.ShipperID
WHERE db_order.ShippedDate = '2016-08-04';

*****************************************************************************************************************************************

10. Show the unique names of all the books *lastname1 firstname1* and
     *lastname4 firstname4* *both* ordered.

SELECT DISTINCT db_book.Title
FROM db_order AS o1
JOIN db_customer AS c1 ON o1.CustomerID = c1.CustomerID
JOIN db_order_detail AS d1 ON o1.OrderID = d1.OrderID
JOIN db_book ON d1.BookID = db_book.BookID
WHERE c1.FirstName = 'firstname1' AND c1.LastName = 'lastname1'
AND db_book.Title IN (
    SELECT DISTINCT db_book.Title
    FROM db_order AS o2
    JOIN db_customer AS c2 ON o2.CustomerID = c2.CustomerID
    JOIN db_order_detail AS d2 ON o2.OrderID = d2.OrderID
    JOIN db_book ON d2.BookID = db_book.BookID
    WHERE c2.FirstName = 'firstname4' AND c2.LastName = 'lastname4'
);

*****************************************************************************************************************************************

11. Show the names of all the books *lastname6 firstname6* was
     responsible for.

SELECT DISTINCT db_book.Title
FROM db_order
JOIN db_employee ON db_order.EmployeeID = db_employee.EmployeeID
JOIN db_order_detail ON db_order.OrderID = db_order_detail.OrderID
JOIN db_book ON db_order_detail.BookID = db_book.BookID
WHERE db_employee.FirstName = 'firstname6' AND db_employee.LastName = 'lastname6';

*****************************************************************************************************************************************

12. Show the names of all the ordered books and their total
     quantities.  List the result in ascending quantity.

SELECT db_book.Title, SUM(db_order_detail.Quantity) AS TotalQuantity
FROM db_order_detail
JOIN db_book ON db_order_detail.BookID = db_book.BookID
GROUP BY db_book.BookID
ORDER BY TotalQuantity ASC;

*****************************************************************************************************************************************

13. Show the names of the customers who ordered at least 2 books.

SELECT DISTINCT db_customer.FirstName, db_customer.LastName
FROM db_customer
JOIN db_order ON db_customer.CustomerID = db_order.CustomerID
JOIN db_order_detail ON db_order.OrderID = db_order_detail.OrderID
GROUP BY db_customer.CustomerID
HAVING SUM(db_order_detail.Quantity) >= 2;

*****************************************************************************************************************************************

14. Show the name of the customers who have ordered at least a book in
     *category3* or *category4* and the book names.

SELECT DISTINCT db_customer.FirstName, db_customer.LastName, db_book.Title
FROM db_customer
JOIN db_order ON db_customer.CustomerID = db_order.CustomerID
JOIN db_order_detail ON db_order.OrderID = db_order_detail.OrderID
JOIN db_book ON db_order_detail.BookID = db_book.BookID
JOIN db_subject ON db_book.SubjectID = db_subject.SubjectID
WHERE db_subject.CategoryName IN ('category3', 'category4');

*****************************************************************************************************************************************

15. Show the name of the customer who has ordered at least one book
     written by *author1*.

SELECT DISTINCT db_customer.FirstName, db_customer.LastName
FROM db_customer
JOIN db_order ON db_customer.CustomerID = db_order.CustomerID
JOIN db_order_detail ON db_order.OrderID = db_order_detail.OrderID
JOIN db_book ON db_order_detail.BookID = db_book.BookID
WHERE db_book.Author = 'author1';

*****************************************************************************************************************************************

16. Show the name and total sale (price of orders) of each employee.

SELECT db_employee.FirstName, db_employee.LastName, 
       SUM(db_order_detail.Quantity * db_book.UnitPrice) AS TotalSales
FROM db_employee
JOIN db_order ON db_employee.EmployeeID = db_order.EmployeeID
JOIN db_order_detail ON db_order.OrderID = db_order_detail.OrderID
JOIN db_book ON db_order_detail.BookID = db_book.BookID
GROUP BY db_employee.EmployeeID;

*****************************************************************************************************************************************

17. Show the book names and their respective quantities for open
     orders (the orders which have not been shipped) at midnight
     08/04/2016.

SELECT db_book.Title, db_order_detail.Quantity
FROM db_order
JOIN db_order_detail ON db_order.OrderID = db_order_detail.OrderID
JOIN db_book ON db_order_detail.BookID = db_book.BookID
WHERE db_order.ShippedDate IS NULL AND db_order.OrderDate = '2016-08-04';

*****************************************************************************************************************************************

18. Show the names of customers who have ordered more than 1 book and
     the corresponding quantities.  List the result in the descending
     quantity.

SELECT db_customer.FirstName, db_customer.LastName, 
       SUM(db_order_detail.Quantity) AS TotalQuantity
FROM db_customer
JOIN db_order ON db_customer.CustomerID = db_order.CustomerID
JOIN db_order_detail ON db_order.OrderID = db_order_detail.OrderID
GROUP BY db_customer.CustomerID
HAVING SUM(db_order_detail.Quantity) > 1
ORDER BY TotalQuantity DESC;

*****************************************************************************************************************************************

19. Show the names of customers who have ordered more than 3 books and
     their respective telephone numbers.

SELECT db_customer.FirstName, db_customer.LastName, db_customer.Phone, COUNT(db_order_detail.BookID) AS TotalBooks
FROM db_customer
JOIN db_order ON db_customer.CustomerID = db_order.CustomerID
JOIN db_order_detail ON db_order.OrderID = db_order_detail.OrderID
GROUP BY db_customer.CustomerID
HAVING COUNT(db_order_detail.BookID) > 3;

*****************************************************************************************************************************************